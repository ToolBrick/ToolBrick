//The virtualbricklist will store brick information in multiarrays
//datablock" position angleid unknown color PRINT colorfx shapefx
//function virtualBrickList::addBrick(%datablock, %pos, %angleid, %unknown, %color, %print, %colorfx, %shapefx)
//function virtualBrickList::addBrickObj(%brick)
//making this change so svn should update
package vblPackage
{
function inputEvent_GetTargetIndex(%arg1, %arg2, %arg3)
{
	echo("TARGET STRING");
	echo(%arg1 SPC %arg2 SPC %arg3);
	Parent::inputEvent_GetTargetIndex(%arg1, %arg2, %arg3);
}
function virtualBrickList::onAdd(%obj)
{
	%obj.numBricks = 0;
	%obj.returnBrickSet;
}

function addCustSave(%pref)
{
	if ($custSavePrefs[%pref]) return 0;
	if ($numCustSaves $= "") $numCustSaves = 0;
	$custSaves[$numCustSaves, "name"] = %pref;
	$custSavePrefs[%pref] = 1;
	$custSavePrefs[%pref, "id"] = $numCustSaves;
	$numCustSaves++;
}

function virtualBrickList::cs_addReal_noimport(%obj, %num, %brick)
{
	if (%brick.noImport) %obj.virBricks[%num, "noimport"] = 1;
	else %obj.virBricks[%num, "noimport"] = 0;
}

function virtualBrickList::cs_create_noimport(%obj, %num, %brick)
{
	if (%obj.virBricks[%num, "noimport"]) %brick.noImport = 1;
}

function virtualBrickList::cs_save_noimport(%obj, %num, %file)
{
	if (%obj.virBricks[%num, "noimport"])
		%file.writeLine("+-NOIMPORT " @ 1 @ "\"");
}

function virtualBrickList::cs_load_noimport(%obj, %num, %addData, %addInfo, %addArgs)
{
	%obj.virBricks[%num, "noimport"] = 1;
}

function virtualBrickList::cs_addReal(%obj, %csName, %num, %brick)
{
	if (%csName $= "") return;
	if ($custSavePrefs[%csName])
		eval("%obj.cs_addReal_" @ %csName @ "(%num, %brick);");
}

function virtualBrickList::cs_create(%obj, %csName, %num, %brick)
{
	if (%csName $= "") return;
	if ($custSavePrefs[%csName])
		eval("%obj.cs_create_" @ %csName @ "(%num,  %brick);");
}

function virtualBrickList::cs_rotateCW(%obj, %csName, %num, %times)
{
	if (isFunction("virtualBrickList", "cs_rotateCW_" @ %csName))
		eval("%obj.cs_rotateCW_" @ %csName @ "(%num, %times);");
}

function virtualBrickList::cs_rotateCCW(%obj, %csName, %num, %times)
{
	if (isFunction("virtualBrickList", "cs_rotateCCW_" @ %csName))
		eval("%obj.cs_rotateCCW_" @ %csName @ "(%num, %times);");
}

function virtualBrickList::cs_save(%obj, %csName, %num, %file)
{
	if (%csName $= "") return;
	if ($custSavePrefs[%csName])
		eval("%obj.cs_save_" @ %csName @ "(%num,  %file);");
}

function virtualBrickList::cs_load(%obj, %csName, %num, %addData, %addInfo, %addArgs, %line)
{
	if (%csName $= "") return;
	if ($custSavePrefs[%csName])
		eval("%obj.cs_load_" @ %csName @ "(%num,  %addData, %addInfo, %addArgs, %line);");
}

function virtualBrickList::addBrick(%obj, %datablock, %pos, %angleid, %isBaseplate, %color, %print, %colorfx, %shapefx, %raycasting, %collision, %rendering)
{
	%obj.virBricks[%obj.numBricks, 0] = %datablock;
	%obj.virBricks[%obj.numBricks, 1] = %pos;
	%obj.virBricks[%obj.numBricks, 2] = %angleid;
	%obj.virBricks[%obj.numBricks, 3] = %isBaseplate;
	%obj.virBricks[%obj.numBricks, 4] = %color;
	%obj.virBricks[%obj.numBricks, 5] = %print;
	%obj.virBricks[%obj.numBricks, 6] = %colorfx;
	%obj.virBricks[%obj.numBricks, 7] = %shapefx;
	%obj.virBricks[%obj.numBricks, 8] = %raycasting;
	%obj.virBricks[%obj.numBricks, 9] = %collision;
	%obj.virBricks[%obj.numBricks, 10] = %rendering;
	%obj.onAddBasicData(%obj.numBricks);
	%obj.numBricks++;
	return %obj.numBricks - 1;
}

function virtualBrickList::onAddBasicData(%obj, %num)
{
	if (!isObject(%obj.virBricks[%num, 0]))
		return;
	//purpose of this function is to update the list's properties so
	//width and length are always precalculated
	//if angleId is 1 or 3, reverse x and y
	//brickSizeX brickSizeY
	%sizeX = %obj.virBricks[%num, 0].brickSizeX / 4;
	%sizeY = %obj.virBricks[%num, 0].brickSizeY / 4;
	%sizeZ = %obj.virBricks[%num, 0].brickSizeZ * 0.2 / 2;
	if (%obj.virBricks[%num, 2] == 1 || %obj.virBricks[%num, 2] == 3)
	{
		%ty = %sizeX;
		%sizeX = %sizeY;
		%sizeY = %ty;
	}
	%posX = getWord(%obj.virBricks[%num, 1], 0);
	%posY = getWord(%obj.virBricks[%num, 1], 1);
	%posZ = getWord(%obj.virBricks[%num, 1], 2);
	if (%obj.maxX $= "")
	{
		%obj.maxX = %posX;
		%obj.minX = %posX;
		%obj.maxY = %posY;
		%obj.minY = %posY;
		%obj.maxZ = %posZ;
		%obj.minZ = %posZ;
	}
	if (%obj.maxX < %sizeX + %posX)
		%obj.maxX = %sizeX + %posX;
	if (%obj.minX > -%sizeX + %posX)
		%obj.minX = -%sizeX + %posX;
	
	if (%obj.maxY < %sizeY + %posY)
		%obj.maxY = %sizeY + %posY;
	if (%obj.minY > -%sizeY + %posY)
		%obj.minY = -%sizeY + %posY;
		
	if (%obj.maxZ < %sizeZ + %posZ)
		%obj.maxZ = %sizeZ + %posZ;
	if (%obj.minZ > -%sizeZ + %posZ)
		%obj.minZ = -%sizeZ + %posZ;
}

function virtualBrickList::resetSize(%obj)
{
	%obj.maxX = "";
	%obj.maxY = "";
	%obj.maxZ = "";
	%obj.minX = "";
	%obj.minY = "";
	%obj.minZ = "";
}

function virtualBrickList::getSizeX(%obj)
{
	return %obj.maxX - %obj.minX;
}

function virtualBrickList::getSizeY(%obj)
{
	return %obj.maxY - %obj.minY;
}

function virtualBrickList::getSizeZ(%obj)
{
	return %obj.maxZ - %obj.minZ;
}

function virtualBrickList::loadBLSFile(%obj, %fileName)
{
	$pref::brickColors::num = 0;
	//if (isFile(%fileName) && fileExt(%fileName) $= ".bls")
	//{
		%file = new FileObject();
		%file.openForRead(%fileName);
		if (%newName $= "")
			%newName = getSubStr(fileName(%fileName), 0, strstr(fileName(%fileName), ".bls"));
		%newFilename = filePath(%fileName) @ "/" @ %newName @ ".nsf";
		echo(%newFilename);
		%curLine = 0;
		while (!%file.isEOF())
		{	
			%line = %file.readLine();
			%lines[%curLine] = %line;
			if (getSubStr(%line, 0, 2) !$= "+-" && %atbricks && strstr(%line, "\"") > 0)
			{
				%qspot = strstr(%line, "\"");
				%datablock = getSubStr(%line, 0, %qspot);
				if (!$uinametablecreated)
					createUINameTable();
				%datablock = $uiNameTable[%datablock];
				if (!isObject(%datablock))
					continue;
				%posLine = getSubStr(%line, %qspot + 2, strLen(%line) - %qspot);
				%obj.addBrick
				(
					%datablock,
					getWords(%posLine, 0, 2),
					getWord(%posLine, 3),
					getWord(%posLine, 4),
					getWord(%posLine, 5) - 1,
					getWord(%posLine, 6),
					getWord(%posLine, 7),
					getWord(%posLine, 8),
					getWord(%posLine, 9),
					getWord(%posLine, 10),
					getWord(%posLine, 11)
				);
				%obj.numBricks++;
			}
			else if (getSubStr(%line, 0, 2) $= "+-" && %atbricks)// && strstr(%line, "\"") > 0)
			{
				%addType = getWord(%line, 0);
				%addType = getSubStr(%addType, 2, strLen(%addType) - 2);
				%addInStart = strLen(%addType) + 3;
				%addInfo = getSubStr(%line, %addInStart, strLen(%line) - %addInStart);
				%curBrick = %obj.numBricks - 1;
				if (strstr(%addInfo, "\"") > 0)
				{
					%word = "";
					for (%l = 0; %l < strlen(%addInfo); %l++)
					{
						%let = getSubStr(%addInfo, %l, 1);
						if (%let !$= "\"")
							%word = %word @ %let;
						else
						{
							%addData = %word;
							%addArgs = getSubStr(%addInfo, strLen(%addData) + 2, strLen(%addInfo) - (strLen(%addData) + 2));
							//%addArgs = just remove %addData @ "\" " from the list
						}
					}
				}
				//different types..
				//we can replace the bottom lines with %obj.loadCustSave(%curBrick, %addType, %addArgs);
				if (%addType $= "Emitter")
				{
					%addInfo = $uiNameTable_Emitters[%addData];
					if (isObject(%addInfo))
					{
						%obj.virBricks[%curBrick, "Emitter"] = %addInfo;
						%obj.virBricks[%curBrick, "Emitter", 0] = getWord(%addArgs, 0);
					}
				}
				else if (%addType $= "Light")
				{
					%addInfo = $uiNameTable_Lights[%addData];
					if (isObject(%addInfo))
						%obj.virBricks[%curBrick, "Light"] = %addInfo;
				}
				else if (%addType $= "Music")
				{
					%addInfo = $uiNameTable_Music[%addData];
					if (isObject(%addInfo))
					{
						%obj.virBricks[%curBrick, "Music"] = %addInfo;
						%obj.virBricks[%curBrick, "Music", 0] = getWord(%addArgs, 0);
					}
				}
				else if (%addType $= "Vehicle")
				{
					%addInfo = $uiNameTable_Vehicle[%addData];
					if (isObject(%addInfo))
					{
						%obj.virBricks[%curBrick, "Vehicle"] = %addInfo;
						%obj.virBricks[%curBrick, "Vehicle", 0] = getWord(%addArgs, 0);
					}
				}
				else if (%addType $= "Item")
				{
					%addInfo = $uiNameTable_Items[%addData];
					if (isObject(%addInfo))
					{
						%obj.virBricks[%curBrick, "Item"] = %addInfo;
						%obj.virBricks[%curBrick, "Item", 0] = getWord(%addArgs, 0);
						%obj.virBricks[%curBrick, "Item", 1] = getWord(%addArgs, 1);
						%obj.virBricks[%curBrick, "Item", 2] = getWord(%addArgs, 2);
					}
				}
				else if (%addType $= "OWNER")
					%obj.virBricks[%curBrick, "OWNER"] = %addData;
				else if ($custSavePrefs[%addType])
					%obj.cs_load(%addType, %curBrick, %addData, %addInfo, %addArgs, %line);
			}
			if (!%atbricks && getWordCount(%line) == 4)
			{
				$pref::brickColors[$pref::brickColors::num] = %line;
				$pref::brickColors::num++;
			}
			if (getWord(%line, 0) $= "Linecount" && getWordCount(%line) == 2)
				%atbricks = true;
			%curLine++;
		}
		%file.close();
		%file.delete();
	//}
}

function virtualBrickList::exportBLSFile(%obj, %fileName)
{
	%file = new FileObject();
	//echo(%fileName);
	%file.openForWrite(%fileName);
	%file.writeLine("This is a Blockland save file.  You probably shouldn't modify it cause you'll screw it up.");
	%file.writeLine("1");
	%file.writeLine("This file has been exported from virtualBrickList.");
	%file.writeLine("");
	for (%i = 0; %i < $pref::brickColors::num; %i++)
	{
		%file.writeLine($pref::brickColors[%i]);
	}
	//export colors here
	%file.writeLine("Linecount" SPC %obj.numBricks);
	for (%brickNum = 0; %brickNum < %obj.numBricks; %brickNum++)
	{
		%datablock = %obj.virBricks[%brickNum, 0];
		%pos = %obj.virBricks[%brickNum, 1];
		%angleid = %obj.virBricks[%brickNum, 2];
		%isBaseplate = %obj.virBricks[%brickNum, 3];
		%color = %obj.virBricks[%brickNum, 4] + 1;
		if (!%print) %print = "NOPRINT";
		else %print = getPrintTexture(%obj.virBricks[%brickNum, 5]);
		%colorfx = %obj.virBricks[%brickNum, 6];
		%shapefx = %obj.virBricks[%brickNum, 7];
		%raycasting = %obj.virBricks[%brickNum, 8];
		%collision = %obj.virBricks[%brickNum, 9];
		%rendering = %obj.virBricks[%brickNum, 10];
		%file.writeLine(%datablock.uiName @ "\"" SPC %pos SPC %angleid SPC %isBaseplate SPC %color SPC %print SPC %colorfx SPC %shapefx SPC %raycasting SPC %collision SPC %rendering);
		if (%obj.virBricks[%brickNum, "OWNER"] !$= "")
			%file.writeLine("+-OWNER " @ %obj.virBricks[%brickNum, "OWNER"] @ "\" ");
		if (%obj.virBricks[%brickNum, "Emitter"] !$= "")
			%file.writeLine("+-EMITTER " @ %obj.virBricks[%brickNum, "Emitter"].uiName @ "\" " @ %obj.virBricks[%brickNum, "Emitter", 0]);
		if (%obj.virBricks[%brickNum, "Light"] !$= "")
			%file.writeLine("+-LIGHT " @ %obj.virBricks[%brickNum, "Light"].uiName @ "\"");
		if (%obj.virBricks[%brickNum, "Music"] !$= "")
			%file.writeLine("+-MUSIC " @ %obj.virBricks[%brickNum, "Music"].uiName @ "\" " @ %obj.virBricks[%brickNum, "Music", 0]);
		if (%obj.virBricks[%brickNum, "Vehicle"] !$= "")
			%file.writeLine("+-VEHICLE " @ %obj.virBricks[%brickNum, "Vehicle"].uiName @ "\" " @ %obj.virBricks[%brickNum, "Vehicle", 0]);
		if (%obj.virBricks[%brickNum, "Item"] !$= "")
			%file.writeLine("+-ITEM " @ %obj.virBricks[%brickNum, "Item"].uiName @ "\" " @ %obj.virBricks[%brickNum, "Item", 0] SPC %obj.virBricks[%brickNum, "Item", 1] SPC %obj.virBricks[%brickNum, "Item", 2]);
		for (%i = 0; %i < $numCustSaves; %i++)
		{
			%csName = $custSaves[%i, "name"];
			if (%obj.virBricks[%brickNum, %csName] !$= "")
				%obj.cs_save(%csName, %brickNum, %file);
		}
		//if (%obj.virBricks[%brickNum, "OWNER"] !$= "")
		//	%file.writeLine("+-OWNER " @ %obj.virBricks[%brickNum, "OWNER"] @ "\"");
	}
	%file.close();
	%file.delete();
}

function virtualBrickList::clearList(%obj)
{
	%obj.numBricks = 0;
}

function virtualBrickList::createBricks(%obj, %client, %overideClient)
{
	if (%client $= "")
		%client = 0;
	if (%obj.returnBrickSet)
		%set = new SimSet();
	for (%i = 0; %i < %obj.numBricks; %i++)
	{
		
		%b = %obj.createBrick(%i, %client, %overideClient));
		if (%obj.returnBrickSet)
			%set.add(%b);
	}
	if (%obj.returnBrickSet)
		return %set;
	
	return true;
}

function virtualBrickList::createBrick(%obj, %i, %client, %overideClient)
{
	%db = %obj.virBricks[%i, 0];
	%pos = %obj.virBricks[%i, 1];
	%angId = %obj.virBricks[%i, 2];
	%isBasePlate = %obj.virBricks[%i, 3];
	%colorId = %obj.virBricks[%i, 4];
	%printId = %obj.virBricks[%i, 5];
	%colorFX = %obj.virBricks[%i, 6];
	%shapeFX = %obj.virBricks[%i, 7];
	%raycasting = %obj.virBricks[%i, 8];
	%collision = %obj.virBricks[%i, 9];
	%rendering = %obj.virBricks[%i, 10];
	//get all the properties so badspot's code can work
	%trans = %pos;
	switch(%angId)
	{
		case 0:
		%trans = %trans SPC " 1 0 0 0";
		case 1:
		%trans = %trans SPC " 0 0 1" SPC $piOver2;
		case 2:
		%trans = %trans SPC " 0 0 1" SPC $pi;
		case 3:
		%trans = %trans SPC " 0 0 -1" SPC $piOver2;
	}
	//echo("Creating brick ", %uiName SPC %db);
	%b = new fxDTSBrick()
	{
		dataBlock = %db;
		angleID = %angId;
		isBasePlate = %isBasePlate;
		colorId = %colorId;
		printId = %printId;
		colorFXID = %colorFX;
		shapeFXID = %shapeFX;
		isPlanted = true;
	};
	if(isObject(DoorSO) && DoorSO.getIDFromDatablockBrick(%db) > -1)
	{
		%brick.noDefaultDoorEvents = 1;
	}
	%b.setRaycasting(%raycasting);
	%b.setColliding(%collision);
	%b.setRendering(%rendering);
	%brickGroup = "";
	if (isObject(%client))
	{
		%client.brickGroup.add(%b);
	}
	else if (%obj.virBricks[%i, "OWNER"])
	{
		%brickGroupName = "BrickGroup_" @ %obj.virBricks[%i, "OWNER"];
		%brickGroup = %brickGroupName.getId();
		if (!isObject(%brickGroup))
		{
			new SimGroup(%brickGroupName);
			%brickGroup = %brickGroupName.getId();
			%brickGroup.bl_id = %obj.virBricks[%i, "OWNER"];
			%brickGroup.name = "BL_ID:" SPC %obj.virBricks[%i, "OWNER"];
			//%idClient = findClientByBlId(%obj.virBricks[%i, "OWNER"]); //wait, if the group isn't created, the client must not be here!
			//if (isObject(%idClient))
			//{
			//	%brickGroup.client = %idClient;
			//	%brickGroup.name = %idClient.name;
			//}
			mainBrickGroup.add(%brickGroup);
		}
		%brickGroup.add(%b);	
		if (isObject(%brickGroup.client)) %b.client = %brickGroup.client;
		%b.stackBL_ID = %brickGroup.bl_id;
	}
	else if ($Server::Lan)
	{
		BrickGroup_LAN.add(%b);
		if (isObject(BrickGroup_LAN.client)) %b.client = BrickGroup_LAN.client;
		%b.stackBL_ID = BrickGroup_LAN.bl_id;
	}
	else
	{
		ClientGroup.getObject(0).brickGroup.add(%b);
		%b.client = ClientGroup.getObject(0);
		%b.stackBL_ID = ClientGroup.getObject(0).bl_id;
	}
			// error("ERROR: ServerLoadSaveFile_Tick() - $LoadingBricks_BrickGroup does not exist!");
			// messageAll('', "ERROR: ServerLoadSaveFile_Tick() - $LoadingBricks_BrickGroup does not exist!");
	%b.setTrusted(1);
	%b.setTransform(%trans);
	%err = %b.plant();
	//plant() returns an integer:
	//0 = plant successful
	//1 = blocked by brick
	//2 = no attachment points
	//3 = blocked by something else
	//4 = ground not level (baseplates only)
	//5 = burried
	if(%err == 1 || %err == 3 || %err == 5)
	{
		//error("ERROR: loadBricks() - Brick could not be placed!");
		%failureCount++;
		%b.delete();
	}
	if (isObject(%obj.virBricks[%i, "Emitter"]))
	{
		%b.setEmitter(%obj.virBricks[%i, "Emitter"]);
		%b.setEmitterDirection(%obj.virBricks[%i, "Emitter", 0]);
	}
	if (isObject(%obj.virBricks[%i, "Light"]))
		%b.setLight(%obj.virBricks[%i, "Light"]);
	if (isObject(%obj.virBricks[%i, "Music"]))
		%b.setSound(%obj.virBricks[%i, "Music"]);
	if (isObject(%obj.virBricks[%i, "Vehicle"]))
	{
		%b.setVehicle(%obj.virBricks[%i, "Vehicle"]);
		if (%obj.virBricks[%i, "Vehicle", 0] == 1)
			%b.spawnVehicle();
	}
	if (isObject(%obj.virBricks[%i, "Item"]))
	{
		echo("add item");
		%b.setItem(%obj.virBricks[%i, "Item"]);
		%b.setItemDirection(%obj.virBricks[%i, "Item", 0]);
		%b.setItemPosition(%obj.virBricks[%i, "Item", 1]);
		%b.setItemRespawnTime(%obj.virBricks[%i, "Item", 2]);
	}
	for (%cs = 0; %cs < $numCustSaves; %cs++)
	{
		%csName = $custSaves[%cs, "name"];
		%obj.cs_create(%csName, %i, %b);
	}
	return %b;
	//add code to handle the emitters and other +- stuff
}

function virtualBrickList::loadBricks(%obj)
{
	for (%i = 0; %i < mainBrickGroup.getCount(); %i++)
	{
		%bg = mainBrickGroup.getObject(%i);
		for (%bn = 0; %bn < %bg.getCount(); %bn++)
		{
			%b = %bg.getObject(%bn);
			%obj.addRealBrick(%b);
		}
	}
}

function virtualBrickList::loadBLIDBricks(%obj, %id)
{
	%group = "BrickGroup_" @ %id;
	if (isObject(%group))
	{
		for (%i = 0; %i < %group.getCount(); %i++)
		{
			%obj.addRealBrick(%group.getObject(%i));
		}
	}
}

function virtualBrickList::addRealBrick(%obj, %b)
{
			//time to add the bricks! %obj, %datablock, %pos, %angleid, %isBaseplate, %color, %print, %colorfx, %shapefx
			%num = %obj.addBrick(%b.getDataBlock(), %b.getPosition(), %b.getAngleId(), %b.isBaseplate(), %b.getColorId(), %b.getPrintId(), %b.getColorFxId(), %b.getShapeFxId(), %b.isRaycasting(), %b.isColliding(), %b.isRendering());
			//time for the special stuff
			if (isObject(%b.emitter))
			{
				%obj.virBricks[%num, "Emitter"] = %b.emitter.emitter.getName();
				%obj.virBricks[%num, "Emitter", 0] = %b.emitterDirection;
			}
			else
			{
				%obj.virBricks[%num, "Emitter"] = "";
				%obj.virBricks[%num, "Emitter", 0] = "";
			}
			if (isObject(%b.light))
				%obj.virBricks[%num, "Light"] = %b.light.getDataBlock().getName();
			else
			{
				%obj.virBricks[%num, "Light"] = "";
			}

			if (isObject(%b.item))
			{
				%obj.virBricks[%num, "Item"] = %b.item.getDataBlock().getName();
				%obj.virBricks[%num, "Item", 0] = %b.itemDirection;
				%obj.virBricks[%num, "Item", 1] = %b.itemPosition;
				%obj.virBricks[%num, "Item", 2] = %b.itemRespawnTime;
			}
			else
			{
				%obj.virBricks[%num, "Item"] = "";
				%obj.virBricks[%num, "Item", 0] = "";
				%obj.virBricks[%num, "Item", 1] = "";
				%obj.virBricks[%num, "Item", 2] = "";
			}
			if (isObject(%b.vehicleDatablock))
			{
				%obj.virBricks[%num, "Vehicle"] = %b.vehicleDatablock;
				if (isObject(%b.vehicle)) %obj.virBricks[%num, "Vehicle", 0] = 1;
				else %obj.virBricks[%num, "Vehicle", 0] = 0;
			}
			else
			{
				%obj.virBricks[%num, "Vehicle"] = "";
				%obj.virBricks[%num, "Vehicle", 0] = 0;
			}
			for (%i = 0; %i < $numCustSaves; %i++)
			{
				%csName = $custSaves[%i, "name"];
				%obj.cs_addReal(%csName, %num, %b);
			}
			if (%b.getGroup().bl_id !$= "")
				%obj.virBricks[%num, "OWNER"] = %b.getGroup().bl_id;
			else
				%obj.virBricks[%num, "OWNER"] = "";
}

function virtualBrickList::importBuild(%obj, %base, %getDown, %flash)
{
	if (!%base.getClassName() $= "fxDTSBrick")
		return;
	%selectBricks = new SimSet();
	%selectBricks.add(%base);
	%foundBricks = new SimSet();
	%foundBricks.add(%base);
	%justFoundBricks = new SimSet();
	%searchBricks = new SimSet();
	for (%i = 0; %i < %base.getNumUpBricks(); %i++)
	{
		%brick = %base.getUpBrick(%i);
		%justFoundBricks.add(%brick);
	}
	if (%getDown)
	{
		for (%i = 0; %i < %base.getDownUpBricks(); %i++)
		{
			%brick = %base.getDownBrick(%i);
			%justFoundBricks.add(%brick);
		}
	}
	//just found bricks and found bricks are seperate because if we put in more restrictions, we might need them
	while (%justFoundBricks.getCount())
	{
		for (%i = 0; %i < %justFoundBricks.getCount(); %i++)
		{
			%jb = %justFoundBricks.getObject(%i);
			if (!%foundBricks.isMember(%jb) && !%jb.noImport) //also other checks here if wanted
			{
				%searchBricks.add(%jb);
				%selectBricks.add(%jb);
			}
			%foundBricks.add(%jb);
		}
		%justFoundBricks.clear();
		for (%i = 0; %i < %searchBricks.getCount(); %i++)
		{
			%sb = %searchBricks.getObject(%i);
			for (%u = 0; %u < %sb.getNumUpBricks(); %u++)
				if (!%foundBricks.isMember(%sb.getUpBrick(%u))) %justFoundBricks.add(%sb.getUpBrick(%u));
			for (%b = 0; %b < %sb.getNumDownBricks(); %b++)
				if (!%foundBricks.isMember(%sb.getDownBrick(%b))) %justFoundBricks.add(%sb.getDownBrick(%b));
		}
		%searchBricks.clear();
	}
	%foundBricks.delete();
	%justFoundBricks.delete();
	%searchBricks.delete();
	for (%i = 0; %i < %selectBricks.getCount(); %i++)
	{
		%brick = %selectBricks.getObject(%i);
		%obj.addRealBrick(%brick);
	}
	%obj.copyNum = 0; //This is so copying stuff works sort of
	if (%flash)
		highlightBricks(%selectBricks);
	else
		%selectBricks.delete();
}

function highlightBricks(%bgroup, %stop)
{
	if (isObject(%bgroup))
	{
		for (%i = 0; %i < %bgroup.getCount(); %i++)
		{
			%brick = %bgroup.getObject(%i);
			if (!(%stop || %brick.highlighted))
			{
				%brick.origColor = %brick.getColorId();
				%brick.setColor(3);
				%brick.highlighted = 1;
			}
			else if (%stop && %brick.highlighted)
			{
				%brick.setColor(%brick.origColor);
				%brick.highlighted = 0;
			}
		}
		if (!%stop)
			schedule(1000, 0, "highlightBricks", %bgroup, 1);
	}
}

function virtualBrickList::shiftBricks(%obj, %dis)
{
	echo(%dis);
	echo("before" SPC %obj.maxX SPC %obj.maxY SPC %obj.maxZ);
	for (%i = 0; %i < %obj.numBricks; %i++)
	{
		%pos = %obj.virBricks[%i, 1];
		%obj.virBricks[%i, 1] = VectorAdd(%pos, %dis);
	}
	%x = getWord(%dis, 0);
	%y = getWord(%dis, 1);
	%z = getWord(%dis, 2);
	%obj.maxX += %x;
	%obj.minX += %x;
	%obj.maxY += %y;
	%obj.minY += %y;
	%obj.maxZ += %z;
	%obj.minZ += %z;
	echo("after" SPC %obj.maxX SPC %obj.maxY SPC %obj.maxZ);
}

function virtualBrickList::realign(%obj, %posStr)
{
	%dirs["north"] = 0;
	%dirs["east"] = 1;
	%dirs["south"] = 2;
	%dirs["west"] = 3;
	%dirs["up"] = 4;
	%dirs["down"] = 5;
	%xOff = 0;
	%yOff = 0;
	%zOff = 0;
	for (%i = 0; %i < getFieldCount(%posStr); %i++)
	{
		%field = getField(%posStr, %i);
		%dir = getWord(%field, 0);
		%pos = getWord(%field, 1);
		
		//some of these translations must be wrong
		switch (%dirs[%dir])
		{
			case 0:
				%yOff += %pos - %obj.maxY;
				echo("case" SPC %dirs[%dir]);
			case 1:
				%xOff += %pos - %obj.maxX;
				echo("case" SPC %dirs[%dir]);
			case 2:
				%yOff += %pos - %obj.minY;
				echo("case" SPC %dirs[%dir]);
			case 3:
				%xOff += %pos - %obj.minX;
				echo("case" SPC %dirs[%dir]);
			case 4:
				%zOff += %pos - %obj.maxZ;
				echo("case" SPC %dirs[%dir]);
			case 5:
				%zOff += %pos - %obj.minZ;
				echo("case" SPC %dirs[%dir]);
		}
	}
	echo("yOff" SPC %yOff);
	if (%xOff != 0 || %yOff != 0 || %zOff != 0)
		%obj.shiftBricks(%xOff SPC %yOff SPC %zOff);
}

function virtualBrickList::recenter(%obj, %pos)
{
	%cen = %obj.getCenter();
	%dis = VectorSub(%pos, %cen);
	//%x = mFloor(getWord(%dis, 0) + 0.5);
	//%y = mFloor(getWord(%dis, 1) + 0.5);
	//%z = mFloor(getWord(%dis, 2) + 0.5);
	%obj.shiftBricks(%dis);
	
}

function virtualBrickList::getCenter(%obj)
{
	for (%i = 0; %i < %obj.numBricks; %i++)
	{
		%pos = %obj.virBricks[%i, 1];
		%x = getWord(%pos, 0);
		%y = getWord(%pos, 1);
		%z = getWord(%pos, 2);
		if (%maxX $= "" || %maxX < %x) %maxX = %x;
		if (%maxY $= "" || %maxY < %y) %maxY = %y;
		if (%maxZ $= "" || %maxZ < %z) %maxZ = %z;
		if (%minX $= "" || %minX > %x) %minX = %x;
		if (%minY $= "" || %minY > %y) %minY = %y;
		if (%minZ $= "" || %minZ > %z) %minZ = %z;
	}
	%centX = ((%maxX - %minX) / 2) + %minX;
	%centY = ((%maxY - %minY) / 2) + %minY;
	%centZ = ((%maxZ - %minZ) / 2) + %minZ;
	return %centX SPC %centY SPC %centZ;
}

function virtualBrickList::rotateBricksCW(%obj, %times)
{
	if (%times $= "") %times = 1;
	if (!%times) return;
	%obj.resetSize();
	%cpos = %obj.getCenter();
	%cx = getWord(%cpos, 0);
	%cy = getWord(%cpos, 1);
	%cz = getWord(%cpos, 2);
	for (%i = 0; %i < %obj.numBricks; %i++)
	{
		%pos = %obj.virBricks[%i, 1];
		%x = getWord(%pos, 0);
		%y = getWord(%pos, 1);
		%z = getWord(%pos, 2);
		%ux = %x - %cx;
		%uy = %y - %cy;
		for (%d = 0; %d < %times; %d++)
		{
			%tx = %ux;
			%ux = %uy;
			%uy = %tx;
			%uy = -%uy;
			%obj.virBricks[%i, 2]++;
		}
		while (%obj.virBricks[%i, 2] > 3)
			%obj.virBricks[%i, 2] -= 4;
		%obj.virBricks[%i, 1] = %ux + %cx SPC %uy + %cy SPC %z;
		//now give custom save properties a chance to change
		for (%c = 0; %c < $numCustSaves; %c++)
		{
			%csName = $custSaves[%c, "name"];
			if (%obj.virBricks[%i, %csName] !$= "")
				%obj.cs_rotateCW(%csName, %i, %times);
		}
		%obj.addBasicData(%i);
	}
}

function virtualBrickList::rotateBricksCCW(%obj, %times)
{
//echo(%obj SPC %times);
	if (%times $= "") %times = 1;
	if (!%times) return;
	%obj.resetSize();
	%cpos = %obj.getCenter();
	%cx = getWord(%cpos, 0);
	%cy = getWord(%cpos, 1);
	%cz = getWord(%cpos, 2);
	for (%i = 0; %i < %obj.numBricks; %i++)
	{
		%pos = %obj.virBricks[%i, 1];
		%x = getWord(%pos, 0);
		%y = getWord(%pos, 1);
		%z = getWord(%pos, 2);
		%ux = %x - %cx;
		%uy = %y - %cy;
		for (%d = 0; %d < %times; %d++)
		{
			%tx = %ux;
			%ux = %uy;
			%uy = %tx;
			%ux = -%ux;
			%obj.virBricks[%i, 2]--;
		}
		while (%obj.virBricks[%i, 2] < 0)
			%obj.virBricks[%i, 2] += 4;
		%obj.virBricks[%i, 1] = %ux + %cx SPC %uy + %cy SPC %z;
		//now give custom save properties a chance to change
		for (%c = 0; %c < $numCustSaves; %c++)
		{
			%csName = $custSaves[%c, "name"];
			if (%obj.virBricks[%i, %csName] !$= "")
				%obj.cs_rotateCCW(%csName, %i, %times);
		}
		%obj.addBasicData(%i);
	}
}

function findClientByBlId(%id)
{
	for (%i = 0; %i < ClientGroup.getCount(); %i++)
	{
		%client = ClientGroup.getObject(%i);
		if (%client.bl_id == %id)
			return %client;
	}
	return 0;
}

function ServerCmdPlantBrick(%client)
{
	if (isObject(%client.player) && isObject(%client.player.tempBrick) && %client.player.tempBrick.isVblBase)
	{
		%tb = %client.player.tempBrick;
		%pos = %tb.getPosition();
		%ad = %tb.getAngleId() - %client.vbl.virBricks[0, 2];
		if (%ad > 0) %client.vbl.rotateBricksCW(%ad);
		else %client.vbl.rotateBricksCCW(mAbs(%ad));
		%dif = VectorSub(%pos, %client.vbl.virBricks[0, 1]);
		%client.vbl.shiftBricks(%dif);
		%client.vbl.copyNum += 1;
		%client.vbl.createBricks();
		//%client.vbl.clearList();
		//%client.vblMode = "Copy";
		//commandToClient(%client, 'centerPrint', "\c2Build placed, you have been set to \c1Copy\c2 mode.", 3);
		//%tb.isVblBase = false;
		//%tb.delete();
	}
	else
	{
		Parent::ServerCmdPlantBrick(%client);
	}
}

function fxDTSBrick::onRemove(%obj)
{
	if (%obj.isVblBase)
	{
		for (%i = 0; %i < clientGroup.getCount(); %i++)
		{
			%client = clientGroup.getObject(%i);
			if (isObject(%client.player) && %client.player.tempBrick == %obj)
			{
				%client.vblMode = "Copy";
				commandToClient(%client, 'centerPrint', "\c2Build placement cancelled, you have been set to \c1Copy\c2 mode.", 3);
				break;
			}
		}
	}
	Parent::onRemove(%obj);
}

function fxDTSBrick::setDataBlock(%obj, %datablock)
{
	if (%obj.isVblBase)
	{
		for (%i = 0; %i < clientGroup.getCount(); %i++)
		{
			%client = clientGroup.getObject(%i);
			if (isObject(%client.player) && %client.player.tempBrick == %obj)
			{
				%client.vblMode = "Copy";
				%obj.isVblBase = false;
				commandToClient(%client, 'centerPrint', "\c2Build placement cancelled, you have been set to \c1Copy\c2 mode.", 3);
				break;
			}
		}
	}
	Parent::setDataBlock(%obj, %datablock);
}

function manipulatorImage::onFire(%this, %obj)
{
	%types = ($TypeMasks::FxBrickAlwaysObjectType);
	%col = containerRaycast(%obj.getEyePoint(), VectorAdd(VectorScale(%obj.getEyeVector(), 8), %obj.getEyePoint()), %types);
	%col = getWord(%col, 0);
	echo("onFire" SPC %this SPC %obj SPC %col);
	manipulatorProjectile::onCollision(%this, %obj, %col);
}

function ServerCmdLoadAllBricks(%client)
{
	%client.vbl.loadBricks();
}
};
activatePackage(vblPackage);
addCustSave("noimport");

datablock ItemData(manipulatorItem : wandItem)
{
	uiName = "Manipulator";
	doColorShift = true;
	colorShiftColor = "0.471 0.471 0.471 1.000";
	image = manipulatorImage;
};

datablock ShapeBaseImageData(manipulatorImage : wandImage)
{
	item = manipulatorItem;
	doColorShift = True;
	colorShiftColor = "0.471 0.471 0.471 1.000";
};

function manipulatorProjectile::onCollision(%this,%obj,%col)
{
	echo("wath" SPC %this SPC %obj SPC %col);
	%client = %obj.client;
	if (!(%client.isAdmin || %client.isSuperAdmin))
	{
		commandToClient(%client, 'centerPrint', "\c2This tool is admin only.", 3);
		return;
	}
	if (%client.vblMode $= "")
	{
		%client.vblMode = "Copy";
	}
	if (!isObject(%client.vbl))
		%client.vbl = new ScriptObject() {class = virtualBrickList;};
	if (%client.vblMode $= "Place")
	{
		%client.player.tempbrick.setTransform(%col.getTransform());
		//commandToClient(%client, 'centerPrint', "\c2Use your tempbrick to place place the build or cancel brick.", 3);
	}
	else if (%col.getClassName() $= "fxDTSBrick" && %client.vblMode $= "Copy")
	{
		%bf = new ScriptObject()
		{
			class = "BrickFinder";
		};
		%bf.setOnSelectCommand(%client @ ".onManipulatorSelect(%sb);");
		%bf.setFinishCommand(%client @ ".onManipulatorDoneSearching(" @ %bf @ ");");
		%client.vblMode = "Copying";
		%client.vbl.clearList();
		commandToClient(%client, 'centerPrint', "\c2Build being copied, you are now in \c1Copying\c2 mode.", 3);
		for (%i = 0; %i < %client.manipNumIL; %i++)
			%incStr = %incStr @ %client.manipILs[%i] @ "\t";
		for (%e = 0; %e < %client.manipNumEL; %e++)
			%excStr = %excStr @ %client.manipELs[%e] @ "\t";
		%bf.search(%col, "chain", %incStr, %excStr, 1);
		//%client.vbl.importBuild(%col, 0, 1);
	}
	else if (%client.vblMode $= "Copy")
	{
		commandToClient(%client, 'centerPrint', "\c2Hit a baseplate to copy a build.", 3);
	}
	else if (%client.vblMode $= "Copying")
	{
		commandToClient(%client, 'centerPrint', "\c2Please wait, the manipulator is searching for bricks.", 3);
	}
	else
	{
		commandToClient(%client, 'centerPrint', "\c2This message should not appear! Please tell Nitramtj.", 3);
	}
}

function Gameconnection::onManipulatorSelect(%client, %brick)
{
	if (%client.vblMode $= "Copying")
	{
		%client.vbl.addRealBrick(%brick);
		if (!%brick.highlighted)
		{
			%brick.origColor = %brick.getColorId();
			%brick.setColor(3);
			%brick.highlighted = 1;
		}
	}
}

function Gameconnection::onManipulatorDoneSearching(%client, %bf)
{
	if (%client.vblMode !$= "Copying")
	{
		%bf.delete();
		return;
	}
	if (%bf.selectBricks.getCount() < 1)
	{
		%client.vblMode = "Copy";
		commandToClient(%client, 'centerPrint', "\c2No bricks were selected, your are now in \c1Copy\c2 mode.", 3);
		%bf.delete();
	}
	else
	{
		%sb = %bf.selectBricks.getObject(0);
		//for (%i = 0; %i < %bf.selectBricks.getCount(); %i++)
		//	%client.vbl.addRealBrick(%bf.selectBricks.getObject(%i));
		schedule(1000, 0, "highlightBricks", %bf.selectBricks, 1);
		%bf.schedule(1500, "delete");
		if (!isObject(%client.player.tempbrick))
		{
			%client.player.tempbrick = new fxDTSBrick()
			{
				datablock = %sb.getDataBlock();
			};
		}
		%tb = %client.player.tempbrick;
		%tb.setDataBlock(%sb.getDataBlock());
		%tb.setTransform(%sb.getTransform());
		%tb.isVblBase = true;
		%client.vblMode = "Place";
		commandToClient(%client, 'centerPrint', "\c2Build copied, you are now in \c1Place\c2 mode.", 3);
	}
}

function ServerCmdManipulator(%client)
{
	if (isObject(%client.player))
	{
		%client.player.updateArm(manipulatorImage);
		%client.player.mountImage(manipulatorImage, 0);
	}
}

//useful event functions:
//outputEvent_GetNumParametersFromIdx(%targetClass, %outputIdx)
//outputEvent_GetOutputName
//outputEvent_GetOutputEventIdx(%targetclass, %outputevent)

//inputEvent_GetTargetName
//inputEvent_GetTargetClass("fxDTSBrick", %inputIDx, %targetIDx)
//inputEvent_GetTargetIndex("fxDTSBrick", %inputIDx, %target)
//inputEvent_GetInputEventIdx("fxDTSBrick", number, number) returns 

addCustSave("EVENT");
function virtualBrickList::cs_addReal_EVENT(%obj, %num, %brick)
{
	if (%brick.numEvents)
	{
		%obj.virBricks[%num, "EVENT"] = %brick.numEvents;
		for (%i = 0; %i < %brick.numEvents; %i++)
		{
			%obj.virBricks[%num, "EVENT", "Delay", %i] = %brick.eventDelay[%i];
			%obj.virBricks[%num, "EVENT", "Enabled", %i] = %brick.eventEnabled[%i];
			%obj.virBricks[%num, "EVENT", "Input", %i] = %brick.eventInput[%i];
			%obj.virBricks[%num, "EVENT", "InputIdx", %i] = %brick.eventInputIdx[%i];
			%obj.virBricks[%num, "EVENT", "NT", %i] = %brick.eventNT[%i];
			%obj.virBricks[%num, "EVENT", "Output", %i] = %brick.eventOutput[%i];
			%obj.virBricks[%num, "EVENT", "OutputAppendClient", %i] = %brick.eventOutputAppendClient[%i];
			%obj.virBricks[%num, "EVENT", "OutputIdx", %i] = %brick.eventOutputIdx[%i];
			for (%op = 1; %brick.eventOutputParameter[%i, %op] !$= ""; %op++)
				%obj.virBricks[%num, "EVENT", "OutputParameter", %i, %op] = %brick.eventOutputParameter[%i, %op];
			%obj.virBricks[%num, "EVENT", "Target", %i] = %brick.eventTarget[%i];
			%obj.virBricks[%num, "EVENT", "TargetIdx", %i] = %brick.eventTargetIdx[%i];
		}
	}
	else %obj.virBricks[%num, "EVENT"] = 0;
}

function virtualBrickList::cs_create_EVENT(%obj, %num, %brick)
{
	for (%i = 0; %i < %obj.virBricks[%num, "EVENT"]; %i++)
	{
		//I hate dealing with targets, lets get this over with first
		//well I was going to only save the target and not the id but then I remembered
		//this SO is also for easy access to brick properties, that wouldn't do!
		///%target = %obj.virBricks[%num, "EVENT", "Target", %i];
		%targetIndex = %obj;
		%brick.eventDelay[%i] = %obj.virBricks[%num, "EVENT", "Delay", %i];
		%brick.eventEnabled[%i] = %obj.virBricks[%num, "EVENT", "Enabled", %i];
		%brick.eventInput[%i] = %obj.virBricks[%num, "EVENT", "Input", %i];
		%brick.eventInputIdx[%i] = %obj.virBricks[%num, "EVENT", "InputIdx", %i];
		//%brick.eventInputIdx[%i] = inputEvent_GetInputEventIdx(%brick.eventInput);
		%brick.eventNT[%i] = %obj.virBricks[%num, "EVENT", "NT", %i] @ "_" @ %obj.copyNum;
		%brick.eventOutput[%i] = %obj.virBricks[%num, "EVENT", "Output", %i];
		%brick.eventOutputAppendClient[%i] = %obj.virBricks[%num, "EVENT", "OutputAppendClient", %i];
		%brick.eventOutputIdx[%i] = %obj.virBricks[%num, "EVENT", "OutputIdx", %i];
		//%brick.eventOutputIdx = outputEvent_GetOutputEventIdx(%brick.eventOutput);
		for (%op = 1; %obj.virBricks[%num, "EVENT", "OutputParameter", %i, %op] !$= ""; %op++)
			%brick.eventOutputParameter[%i, %op] = %obj.virBricks[%num, "EVENT", "OutputParameter", %i, %op];
		%brick.eventTarget[%i] = %obj.virBricks[%num, "EVENT", "Target", %i];
		%brick.eventTargetIdx[%i] = %obj.virBricks[%num, "EVENT", "TargetIdx", %i];
		%brick.numEvents = %obj.virBricks[%num, "EVENT"];
	}
}

function virtualBrickList::cs_rotateCW_Event(%obj, %num, %times)
{
	echo("Event rotation");
	//is it a good idea to declare constants inside a function called multiple times?
	//this will probably be switched to some globals
	%relays["fireRelayNorth"] = 1;
	%relays["fireRelayEast"] = 2;
	%relays["fireRelaySouth"] = 3;
	%relays["fireRelayWest"] = 4;
	%relayNames[1] = "fireRelayNorth";
	%relayNames[2] = "fireRelayEast";
	%relayNames[3] = "fireRelaySouth";
	%relayNames[4] = "fireRelayWest";
	for (%i = 0; %i < %obj.virBricks[%num, "EVENT"]; %i++)
	{
		%relayNum = %relays[%obj.virBricks[%num, "EVENT", "Output", %i]];
		if (%relayNum)
		{
			%relayNum += %times;
			while (%relayNum > 4) %relayNum -= 4;
			%obj.virBricks[%num, "EVENT", "Output", %i] = %relayNames[%relayNum];
			%obj.virBricks[%num, "EVENT", "OutputIdx", %i] = outputEvent_GetOutputEventIdx("fxDTSBrick", %relayNames[%relayNum]); //relays are fxdtsbrick stuff
		}
		%paras = $OutputEvent_parameterList[inputEvent_getTargetClass("fxDTSBrick"), %obj.virBricks[%num, "EVENT", "OutputIdx", %i]];
		%paraCount = %obj.virBricks[%num, "EVENT", "OutputIdx", %i];//can't we just do getFieldCount()? using this because it's here
		outputEvent_GetNumParametersFromIdx(%targetClass, %obj.virBricks); //now check the event's output parameters for the vector type It'd be nice if there was a more efficient way than search for every brick every rotation
		for (%t = 0; %t < %times; %t++)
		{
			
		}
	}
}

function virtualBrickList::cs_rotateCCW_Event(%obj, %num, %times)
{
	echo("Event rotation 2");
}

function virtualBrickList::cs_save_EVENT(%obj, %num, %file)
{
	for (%i = 0; %i < %obj.virBricks[%num, "EVENT"]; %i++)
	{
		%outputParameters = "";
		for (%op = 1; %obj.virBricks[%num, "EVENT", "OutputParameter", %i, %op] !$= ""; %op++)
			%outputParameters = %outputParameters @ %obj.virBricks[%num, "EVENT", "OutputParameter", %i, %op] @ "\t";
		%file.writeLine("+-EVENT" SPC "\t" @
		%obj.virBricks[%num, "EVENT", "Delay", %i] @ "\t" @
		%obj.virBricks[%num, "EVENT", "Enabled", %i] @ "\t" @
		%obj.virBricks[%num, "EVENT", "Input", %i] @ "\t" @
		%obj.virBricks[%num, "EVENT", "InputIdx", %i] @ "\t" @
		%obj.virBricks[%num, "EVENT", "NT", %i] @ "\t" @
		%obj.virBricks[%num, "EVENT", "Output", %i] @ "\t" @
		%obj.virBricks[%num, "EVENT", "OutputAppendClient", %i] @ "\t" @
		%obj.virBricks[%num, "EVENT", "OutputIdx", %i] @ "\t" @
		%obj.virBricks[%num, "EVENT", "Target", %i] @ "\t" @
		%obj.virBricks[%num, "EVENT", "TargetIdx", %i] @ "\t" @
		%outputParameters);
	}
}

function virtualBrickList::cs_load_EVENT(%obj, %num, %addData, %addInfo, %addArgs, %line)
{
echo("called" SPC %num);
	%obj.virBricks[%num, "EVENT"]++;
	%i = %obj.virBricks[%num, "EVENT"] - 1;
	%obj.virBricks[%num, "EVENT", "Delay", %i] = getField(%line, 1);
	%obj.virBricks[%num, "EVENT", "Enabled", %i] = getField(%line, 2);
	%obj.virBricks[%num, "EVENT", "Input", %i] = getField(%line, 3);
	%obj.virBricks[%num, "EVENT", "InputIdx", %i] = getField(%line, 4);
	%obj.virBricks[%num, "EVENT", "NT", %i] = getField(%line, 5);
	%obj.virBricks[%num, "EVENT", "Output", %i] = getField(%line, 6);
	%obj.virBricks[%num, "EVENT", "OutputAppendClient", %i] = getField(%line, 7);
	%obj.virBricks[%num, "EVENT", "OutputIdx", %i] = getField(%line, 8);
	%obj.virBricks[%num, "EVENT", "Target", %i] = getField(%line, 9);
	%obj.virBricks[%num, "EVENT", "TargetIdx", %i] = getField(%line, 10);
	for (%op = 11; %op < getFieldCount(%line); %op++)
		%obj.virBricks[%num, "EVENT", "OutputParameter", %i, %op - 10] = getField(%line, %op);
}

addCustSave("NTOBJECTNAME");
function virtualBrickList::cs_addReal_NTOBJECTNAME(%obj, %num, %brick)
{
	if (strLen(%brick.getName()) > 0) %obj.virBricks[%num, "NTOBJECTNAME"] = %brick.getName();
	else %obj.virBricks[%num, "NTOBJECTNAME"] = "";
}

function virtualBrickList::cs_create_NTOBJECTNAME(%obj, %num, %brick)
{
	if (strLen(%obj.virBricks[%num, "NTOBJECTNAME"]) > 0)
	{
		%brick.setNTObjectName(%obj.virBricks[%num, "NTOBJECTNAME"] @ "_" @ %obj.copyNum);
	}
}

function virtualBrickList::cs_save_NTOBJECTNAME(%obj, %num, %file)
{
	if (strLen(%obj.virBricks[%num, "NTOBJECTNAME"]) > 0)
		%file.writeLine("+-NTOBJECTNAME" SPC "\t" @ %obj.virBricks[%num, "NTOBJECTNAME"]);
}

function virtualBrickList::cs_load_NTOBJECTNAME(%obj, %num, %addData, %addInfo, %addArgs, %line)
{
	%obj.virBricks[%num, "NTOBJECTNAME"] = getField(%line, 1);
}
//Trader suggests I call this... The Manipulator!

exec("./Script_BrickFInder.cs");
exec("./Support_Types.cs");